##Collection_Basic

1. Stack & Queue
  - Stack => 후입선출(LIFO)
    1) 자료 입력: push
    2) 자료 출력: pop
  - Queue => 선입선출(FIFO)
    1) 자료 입력: offer
    2) 자료 출력: poll
    
 2. Comparable & Comparator
  - Comparable : compareTo()
  - Comparator : compare()
    메서드의 반환 값: 기본은 오름차순
    Compare에 추상메서드는 오버라이드 해야한다.
    
  정렬은 Collection.sort(list); 을 이용해서 정렬
  기본적인 오름차순 정렬, 정렬 방식을 변경하려면 결정하는 객체를 생성해야 함.
  
  * Collection.shuffle(list) //데이터 섞기 인데 List아닌 Set이면 섞기가 안됨.
  
  3. List와 Set
  - List : 입력한 데이터의 순서가 있다
           중복되는 데이터를 저장할 수 있다.
            List<타입> 변수명 = new ArrayList<>();
  - Set : 입력한 데이터의 순서가 없다.
          중복된 데이터를 저장할 수 없다.
            Set 변수명 = new HashSet<>();
            
           1) clear() -> Set 데이터 전체를 삭제
           2) remove(삭제할 자료)-> 해당 자료 삭제
          
          인덱스로 데이터를 하나씩 불러올 수 있게 만들려면 Iteraor를 호출해야 한다.
          
          hasNext()=> 다음 자료 위치로 이동해서 데이터가 존재하면 true, 존재하지 않으면 false
           
 	  예)	
    // 1~100 사이의 중복되지 않는 정수 5개 만들기
		Set<Integer> intRnd = new HashSet<>();

		while (intRnd.size() < 5) {
			int num = (int) (Math.random() * 100 + 1);
			// 중복되지 않은 5개의 데이터가 Set에 저장됨
			intRnd.add(num);
		}          
    
    List<Integer> intRndList = new ArrayList<>(intRnd);
		System.out.println("List의 자료 출력...");

		for (int i = 0; i < intRndList.size(); i++) {
			System.out.println(intRndList.get(i));

		}
		// intRndList를 Integer형식의 num에 담아서 출력한다.
		for (Integer num : intRndList) {
			System.out.println(num + " ");
		}
